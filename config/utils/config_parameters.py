"""
Auto-generated Python conversion of Verilog `define` parameters.
Generated to mirror the Verilog configuration you pasted.

Notes:
- Verilog `$clog2(n)` is implemented as `clog2(n)` returning 0 for n<=1 and otherwise ceil(log2(n)).
- Ternary expressions like `(a == 1) ? 1 : $clog2(a)` are mapped to Python `1 if a == 1 else clog2(a)`.
- All values are integers suitable for using as widths or sizes in scripts.
"""

from __future__ import annotations

from typing import Dict
from enum import IntEnum

def clog2(x: int) -> int:
    """Ceiling of log2(x) for positive integers. Returns 0 for x<=1 to match Verilog $clog2 behavior."""
    if x <= 1:
        return 0
    # (x-1).bit_length() equals ceil(log2(x)) for integer x>0
    return (x - 1).bit_length()
    # return x.bit_length()

class AGMode(IntEnum):
    NULL = 0
    KEEP = 1
    BUFFER = 2
    CONSTANT = 3

class BAGMode(IntEnum):
    KEEP=1
    BUFFER=0

# --------------------------------------------------
# NDP Parameter Definitions
# --------------------------------------------------
PORT_VALID_BIT = 1
PORT_BRANCH_BIT = 1
PORT_LAST_BIT = 1
PORT_SAME_BIT = 1
PORT_LAST_INDEX = 3
SLICE_NUM = 16

# Global
GLOBAL_DATA_WIDTH = 64

# Datahub
LOCAL_REQ_NUM = 4
LOCAL_REQ_WRITE_ENABLE_MASK = 0b0011
GLOBAL_REQ_NUM = 1
TOTAL_REQ_NUM = LOCAL_REQ_NUM + GLOBAL_REQ_NUM
BANK_DATA_WIDTH = 128
TOTAL_BANK_NUM = 4
REQ_ADDR_BANK_WIDTH = 2
REQ_ADDR_ROW_WIDTH = 13
REQ_ADDR_COL_WIDTH = 6
REQ_ADDR_RC_WIDTH = REQ_ADDR_ROW_WIDTH + REQ_ADDR_COL_WIDTH
REQ_ADDR_WIDTH = REQ_ADDR_BANK_WIDTH + REQ_ADDR_ROW_WIDTH + REQ_ADDR_COL_WIDTH
REQ_SRC_TAG_WIDTH = clog2(TOTAL_REQ_NUM)
RET_DST_TAG_WIDTH = clog2(TOTAL_BANK_NUM)
REQ_OOO_DEPTH = 8
REQ_QUEUE_DEPTH = 8
REQ_OOO_PTR_WIDTH = clog2(REQ_OOO_DEPTH)
REQ_ID_WIDTH = clog2(REQ_OOO_DEPTH)
REQ_TAG_WIDTH = REQ_ID_WIDTH + REQ_SRC_TAG_WIDTH
REQ_RC_PAYLOAD_WIDTH = REQ_TAG_WIDTH + 1 + REQ_ADDR_RC_WIDTH
REQUEST_WIDTH = REQ_ADDR_WIDTH + 1 + REQ_TAG_WIDTH
REQ_TAG_BUF_DEPTH = 4
HUB_FRAME_WIDTH = 150
HUB_FRAME_DATA_WIDTH = 128
HUB_FRAME_ADDR_ROW_WIDTH = 13
HUB_FRAME_ADDR_COL_WIDTH = 6
HUB_FRAME_ADDR_WIDTH = HUB_FRAME_ADDR_ROW_WIDTH + HUB_FRAME_ADDR_COL_WIDTH
HUB_RET_DATA_WIDTH = BANK_DATA_WIDTH
HUB_RET_TAG_WIDTH = REQ_TAG_WIDTH
HUB_RET_FIFO_WIDTH = HUB_RET_DATA_WIDTH + HUB_RET_TAG_WIDTH
HUB_RET_FIFO_DEPTH = 4

# AXI4
AXI_ADDR_WIDTH = 32
AXI_DATA_WIDTH = BANK_DATA_WIDTH
AXI_STRB_WIDTH = AXI_DATA_WIDTH // 8
AXI_ID_WIDTH = 4
AXI_LEN_WIDTH = 8
AXI_SIZE_WIDTH = 3
AXI_BURST_WIDTH = 2
AXI_RESP_WIDTH = 2
AXI_MAX_OUTSTANDING_TRANS = 8

# DDR
SLICE_DDR_BANK_ADDR_NUM = 4
DDR_COL_SIZE = 64
DDR_ROW_SIZE = 6144
DDR_COL_DATA_WIDTH = 128
DDR_DATA_MIN_WIDTH = 8

DDR_TOTAL_BANK_NUM = SLICE_DDR_BANK_ADDR_NUM * SLICE_NUM
DDR_ADDR_OFFSET = DDR_COL_DATA_WIDTH // DDR_DATA_MIN_WIDTH
DDR_ADDR_OFFSET_WIDTH = clog2(DDR_ADDR_OFFSET)
DDR_COL_ADDR_WIDTH = clog2(DDR_COL_SIZE)
DDR_ROW_ADDR_WIDTH = clog2(DDR_ROW_SIZE)
DDR_BANK_ADDR_WIDTH = clog2(DDR_TOTAL_BANK_NUM)
SLICE_DDR_BANK_ADDR_WIDTH = 1 if SLICE_DDR_BANK_ADDR_NUM == 1 else clog2(SLICE_DDR_BANK_ADDR_NUM)
# GLOBAL_DDR_BANK_ADDR_WIDTH = DDR_BANK_ADDR_WIDTH - SLICE_DDR_BANK_ADDR_WIDTH
GLOBAL_DDR_BANK_ADDR_WIDTH = DDR_BANK_ADDR_WIDTH
SLICE_DDR_ADDR_WIDTH = SLICE_DDR_BANK_ADDR_WIDTH + DDR_ROW_ADDR_WIDTH + DDR_COL_ADDR_WIDTH + DDR_ADDR_OFFSET_WIDTH
SLICE_DDR_ADDR_NOOFF_WIDTH = SLICE_DDR_BANK_ADDR_WIDTH + DDR_ROW_ADDR_WIDTH + DDR_COL_ADDR_WIDTH
GLOBAL_DDR_ADDR_WIDTH = GLOBAL_DDR_BANK_ADDR_WIDTH + DDR_ROW_ADDR_WIDTH + DDR_COL_ADDR_WIDTH + DDR_ADDR_OFFSET_WIDTH
# GLOBAL_DDR_ADDR_WIDTH = GLOBAL_DDR_BANK_ADDR_WIDTH + DDR_ROW_ADDR_WIDTH + DDR_COL_ADDR_WIDTH + DDR_ADDR_OFFSET_WIDTH
GLOBAL_DDR_ADDR_NOOFF_WIDTH = GLOBAL_DDR_BANK_ADDR_WIDTH + DDR_ROW_ADDR_WIDTH + DDR_COL_ADDR_WIDTH

DDR_MAX_DELAY = 23

# Index Generation Array
IGA_LC_NUM = 8
IGA_ROW_LC_NUM = 4
IGA_COL_LC_NUM = 4
IGA_PE_NUM = 8

# IGA_LC
IGA_LC_PORT_TAG_WIDTH = PORT_VALID_BIT + PORT_LAST_BIT + PORT_SAME_BIT + PORT_LAST_INDEX
IGA_LC_PORT_DATA_WIDTH = 12
IGA_LC_PORT_WIDTH = IGA_LC_PORT_TAG_WIDTH + IGA_LC_PORT_DATA_WIDTH
IGA_LC_SRC_LC_NUM = 4
IGA_LC_SRC_NUM = IGA_LC_SRC_LC_NUM
IGA_LC_DST_LC_NUM = 4
IGA_LC_DST_ROW_LC_NUM = 3
IGA_LC_DST_COL_LC_NUM = 3
IGA_LC_DST_PE_NUM = 9
IGA_LC_DST_SE_NUM = 9
IGA_LC_DST_NUM = (IGA_LC_DST_LC_NUM + IGA_LC_DST_ROW_LC_NUM + IGA_LC_DST_COL_LC_NUM + IGA_LC_DST_PE_NUM + IGA_LC_DST_SE_NUM)
IGA_LC_SRC_ID_WIDTH = clog2(IGA_LC_SRC_NUM)
IGA_LC_OUTMOST_LOOP = 1
IGA_LC_INITIAL_VALUE_WIDTH = 12 + 1
IGA_LC_STRIDE_VALUE_WIDTH = 12 + 1
IGA_LC_END_VALUE_WIDTH = 12 + 1
IGA_LC_CFG_PORT_WIDTH = (IGA_LC_SRC_ID_WIDTH + IGA_LC_OUTMOST_LOOP + IGA_LC_INITIAL_VALUE_WIDTH + IGA_LC_STRIDE_VALUE_WIDTH + IGA_LC_END_VALUE_WIDTH + PORT_LAST_INDEX)
IGA_LC_INBUFFER_WIDTH = PORT_VALID_BIT + PORT_LAST_BIT + PORT_LAST_INDEX
IGA_LC_COUNTER_VALUE_WIDTH = IGA_LC_PORT_DATA_WIDTH
IGA_LC_OUTBUFFER_DEPTH = 2
IGA_LC_OUTBUFFER_TAG_WIDTH = PORT_VALID_BIT + PORT_LAST_BIT + PORT_LAST_INDEX
IGA_LC_OUTBUFFER_DATA_WIDTH = IGA_LC_PORT_DATA_WIDTH
IGA_LC_OUTBUFFER_WIDTH = IGA_LC_OUTBUFFER_TAG_WIDTH + IGA_LC_OUTBUFFER_DATA_WIDTH
IGA_LC_OUTBUFFER_PTR_WIDTH = clog2(IGA_LC_OUTBUFFER_DEPTH)
IGA_LC_OUTBUFFER_CNT_WIDTH = clog2(IGA_LC_OUTBUFFER_DEPTH) + 1

# IGA_ROW_LC
IGA_ROW_LC_PORT_TAG_WIDTH = PORT_VALID_BIT + PORT_LAST_BIT + PORT_SAME_BIT + PORT_LAST_INDEX
IGA_ROW_LC_PORT_DATA_WIDTH = 2
IGA_ROW_LC_PORT_WIDTH = IGA_ROW_LC_PORT_TAG_WIDTH + IGA_ROW_LC_PORT_DATA_WIDTH
IGA_ROW_LC_SRC_LC_NUM = 6
IGA_ROW_LC_SRC_COL_LC_NUM = 1
IGA_ROW_LC_SRC_NUM = IGA_ROW_LC_SRC_LC_NUM + IGA_ROW_LC_SRC_COL_LC_NUM
IGA_ROW_LC_DST_COL_LC_NUM = 1
IGA_ROW_LC_DST_SE_NUM = 1
IGA_ROW_LC_DST_NUM = IGA_ROW_LC_DST_COL_LC_NUM + IGA_ROW_LC_DST_SE_NUM
IGA_ROW_LC_SRC_ID_WIDTH = clog2(IGA_ROW_LC_SRC_NUM)
IGA_ROW_LC_INITIAL_VALUE_WIDTH = 2 + 1
IGA_ROW_LC_STRIDE_VALUE_WIDTH = 2 + 1
IGA_ROW_LC_END_VALUE_WIDTH = 2 + 1
IGA_ROW_LC_CFG_PORT_WIDTH = (IGA_ROW_LC_SRC_ID_WIDTH + IGA_ROW_LC_INITIAL_VALUE_WIDTH + IGA_ROW_LC_STRIDE_VALUE_WIDTH + IGA_ROW_LC_END_VALUE_WIDTH + PORT_LAST_INDEX)
IGA_ROW_LC_INBUFFER_WIDTH = PORT_VALID_BIT + PORT_LAST_BIT + PORT_LAST_INDEX
IGA_ROW_LC_COUNTER_VALUE_WIDTH = IGA_ROW_LC_PORT_DATA_WIDTH
IGA_ROW_LC_OUTBUFFER_DEPTH = 2
IGA_ROW_LC_OUTBUFFER_TAG_WIDTH = PORT_VALID_BIT + PORT_LAST_BIT + PORT_LAST_INDEX
IGA_ROW_LC_OUTBUFFER_DATA_WIDTH = IGA_ROW_LC_PORT_DATA_WIDTH
IGA_ROW_LC_OUTBUFFER_WIDTH = IGA_ROW_LC_OUTBUFFER_TAG_WIDTH + IGA_ROW_LC_OUTBUFFER_DATA_WIDTH
IGA_ROW_LC_OUTBUFFER_PTR_WIDTH = clog2(IGA_ROW_LC_OUTBUFFER_DEPTH)
IGA_ROW_LC_OUTBUFFER_CNT_WIDTH = clog2(IGA_ROW_LC_OUTBUFFER_DEPTH) + 1

# IGA_COL_LC
IGA_COL_LC_PORT_TAG_WIDTH = PORT_VALID_BIT + PORT_LAST_BIT + PORT_SAME_BIT + PORT_LAST_INDEX
IGA_COL_LC_PORT_DATA_WIDTH = 5
IGA_COL_LC_PORT_WIDTH = IGA_COL_LC_PORT_TAG_WIDTH + IGA_COL_LC_PORT_DATA_WIDTH
IGA_COL_LC_SRC_LC_NUM = 6
IGA_COL_LC_SRC_ROW_LC_NUM = 1
IGA_COL_LC_SRC_NUM = IGA_COL_LC_SRC_LC_NUM + IGA_COL_LC_SRC_ROW_LC_NUM
IGA_COL_LC_DST_ROW_LC_NUM = 1
IGA_COL_LC_DST_SE_NUM = 1
IGA_COL_LC_DST_NUM = IGA_COL_LC_DST_ROW_LC_NUM + IGA_COL_LC_DST_SE_NUM
IGA_COL_LC_SRC_ID_WIDTH = clog2(IGA_COL_LC_SRC_NUM)
IGA_COL_LC_INITIAL_VALUE_WIDTH = 5 + 1
IGA_COL_LC_STRIDE_VALUE_WIDTH = 5 + 1
IGA_COL_LC_END_VALUE_WIDTH = 5 + 1
IGA_COL_LC_CFG_PORT_WIDTH = (IGA_COL_LC_SRC_NUM + IGA_COL_LC_INITIAL_VALUE_WIDTH + IGA_COL_LC_STRIDE_VALUE_WIDTH + IGA_COL_LC_END_VALUE_WIDTH + PORT_LAST_INDEX)
IGA_COL_LC_INBUFFER_WIDTH = PORT_VALID_BIT + PORT_LAST_BIT + PORT_LAST_INDEX
IGA_COL_LC_COUNTER_VALUE_WIDTH = IGA_COL_LC_PORT_DATA_WIDTH
IGA_COL_LC_OUTBUFFER_DEPTH = 2
IGA_COL_LC_OUTBUFFER_TAG_WIDTH = PORT_VALID_BIT + PORT_LAST_BIT + PORT_LAST_INDEX
IGA_COL_LC_OUTBUFFER_DATA_WIDTH = IGA_COL_LC_PORT_DATA_WIDTH
IGA_COL_LC_OUTBUFFER_WIDTH = IGA_COL_LC_OUTBUFFER_TAG_WIDTH + IGA_COL_LC_OUTBUFFER_DATA_WIDTH
IGA_COL_LC_OUTBUFFER_PTR_WIDTH = clog2(IGA_COL_LC_OUTBUFFER_DEPTH)
IGA_COL_LC_OUTBUFFER_CNT_WIDTH = clog2(IGA_COL_LC_OUTBUFFER_DEPTH) + 1

# IGA_PE
IGA_PE_PORT_TAG_WIDTH = PORT_VALID_BIT + PORT_LAST_BIT + PORT_SAME_BIT + PORT_LAST_INDEX
IGA_PE_PORT_DATA_WIDTH = 12
IGA_PE_PORT_WIDTH = IGA_PE_PORT_TAG_WIDTH + IGA_PE_PORT_DATA_WIDTH
IGA_PE_INPORT_NUM = 3
IGA_PE_SRC_LC_NUM = 3
IGA_PE_SRC_PE_NUM = 4
IGA_PE_SRC_NUM = IGA_PE_SRC_LC_NUM + IGA_PE_SRC_PE_NUM
IGA_PE_DST_PE_NUM = 12
IGA_PE_DST_SE_NUM = 9
IGA_PE_DST_NUM = IGA_PE_DST_PE_NUM + IGA_PE_DST_SE_NUM
IGA_PE_INPORT_MODE_WIDTH = 2
IGA_PE_INPORT_NULL = 0b00
IGA_PE_INPORT_BUFFER_MODE = 0b01
IGA_PE_INPORT_KEEP_MODE = 0b10
IGA_PE_INPORT_CONSTANT_MODE = 0b11
IGA_PE_CONSTANT_VALUE_WIDTH = 12
IGA_PE_ALU_DATA_WIDTH = IGA_PE_PORT_DATA_WIDTH
IGA_PE_ALU_TAG_WIDTH = PORT_VALID_BIT + PORT_LAST_BIT + PORT_LAST_INDEX
IGA_PE_ALU_OPCODE_WIDTH = 2
IGA_PE_ALU_OPCODE_INT_ADD = 0b00
IGA_PE_ALU_OPCODE_INT_MULT = 0b01
IGA_PE_ALU_OPCODE_INT_MAC = 0b10
IGA_PE_SRC_ID_WIDTH = clog2(IGA_PE_SRC_NUM)
IGA_PE_CFG_PORT_WIDTH = (IGA_PE_INPORT_NUM * (IGA_PE_SRC_ID_WIDTH + IGA_PE_INPORT_MODE_WIDTH + PORT_LAST_INDEX + IGA_PE_CONSTANT_VALUE_WIDTH) + IGA_PE_ALU_OPCODE_WIDTH)
IGA_PE_CFG_REG_WIDTH = (IGA_PE_INPORT_NUM * (IGA_PE_SRC_ID_WIDTH + IGA_PE_INPORT_MODE_WIDTH + PORT_LAST_INDEX) + IGA_PE_ALU_OPCODE_WIDTH)
IGA_PE_OUTBUFFER_DEPTH = 2
IGA_PE_OUTBUFFER_TAG_WIDTH = PORT_VALID_BIT + PORT_LAST_BIT + PORT_LAST_INDEX
IGA_PE_OUTBUFFER_DATA_WIDTH = IGA_PE_PORT_DATA_WIDTH
IGA_PE_OUTBUFFER_WIDTH = IGA_PE_OUTBUFFER_TAG_WIDTH + IGA_PE_OUTBUFFER_DATA_WIDTH
IGA_PE_OUTBUFFER_PTR_WIDTH = clog2(IGA_PE_OUTBUFFER_DEPTH)
IGA_PE_OUTBUFFER_CNT_WIDTH = clog2(IGA_PE_OUTBUFFER_DEPTH) + 1

# Buffer
RD_BUFFER_NUM = 5
WR_BUFFER_NUM = 1
BUFFER_NUM = RD_BUFFER_NUM + WR_BUFFER_NUM
BUFFER_ID_WIDTH = clog2(BUFFER_NUM)
BUFFER_ROW_SIZE = 4
BUFFER_COL_SIZE = 32
BUFFER_SIZE = BUFFER_ROW_SIZE * BUFFER_COL_SIZE
BUFFER_SIZE_WIDTH = (BUFFER_SIZE - 1).bit_length() + 1
BUFFER_ROW_ADDR_WIDTH = (BUFFER_ROW_SIZE - 1).bit_length()
BUFFER_COL_ADDR_WIDTH = (BUFFER_COL_SIZE - 1).bit_length()
BUFFER_ADDR_SIZE = BUFFER_ROW_ADDR_WIDTH + BUFFER_COL_ADDR_WIDTH
BUFFER_COL_WIDTH = BUFFER_COL_SIZE * 8
BUFFER_BANK_NUM = 8
BUFFER_BANK_ID_WIDTH = clog2(BUFFER_BANK_NUM)
BUFFER_BANK_DATA_NUM = 4
BUFFER_BANK_OFFEST_WIDTH = clog2(BUFFER_BANK_DATA_NUM)
BUFFER_DEPTH = BUFFER_ROW_SIZE
BUFFER_BANK_ADDR_WIDTH = clog2(BUFFER_DEPTH)
BUFFER_BANK_DATA_WIDTH = BUFFER_BANK_DATA_NUM * 8
BUFFER_BANK_TAG_WIDTH = PORT_BRANCH_BIT + PORT_LAST_BIT + PORT_LAST_INDEX
BUFFER_STRB_WIDTH = BUFFER_BANK_DATA_NUM
BUFFER_ENABLE = 1
BUF_WR_SRC_ID_WIDTH = 1
BUFFER_LIFE_TIME_WIDTH = 2
BUFFER_MODE_WIDTH = 1
BMC_CFG_REG_WIDTH = BUFFER_ENABLE + BUF_WR_SRC_ID_WIDTH + BUFFER_LIFE_TIME_WIDTH + BUFFER_MODE_WIDTH + BUFFER_BANK_NUM
BMC_CFG_PORT_WIDTH = BMC_CFG_REG_WIDTH
VALID_BUFFER_BANK_WIDTH = BUFFER_BANK_DATA_NUM
VALID_BUFFER_DEPTH = BUFFER_DEPTH
TAG_BUFFER_BANK_WIDTH = BUFFER_BANK_TAG_WIDTH
TAG_BUFFER_DEPTH = BUFFER_DEPTH
DATA_BUFFER_BANK_WIDTH = BUFFER_BANK_DATA_WIDTH
DATA_BUFFER_DEPTH = BUFFER_DEPTH
ARRAY_PORT_TAG = PORT_VALID_BIT + PORT_BRANCH_BIT + PORT_LAST_BIT + PORT_SAME_BIT + PORT_LAST_INDEX
ARRAY_PORT_DATA = 32
ARRAY_PORT_GROUP_NUM = 8
ARRAY_PORT_GROUP_ID_WIDTH = clog2(ARRAY_PORT_GROUP_NUM)
ARRAY_PORT_GROUP_SIZE = 8
SA_PORT_GROUP_SIZE = ARRAY_PORT_GROUP_SIZE
GA_PORT_GROUP_SIZE = ARRAY_PORT_GROUP_SIZE

# Stream Engine
SE_MEM_INPORT_TAG_WIDTH = PORT_VALID_BIT + PORT_LAST_BIT + PORT_SAME_BIT + PORT_LAST_INDEX
SE_MEM_INPORT_IDX_WIDTH = 12
SE_MEM_INPORT_WIDTH = SE_MEM_INPORT_IDX_WIDTH + SE_MEM_INPORT_TAG_WIDTH
SE_BUF_INPORT_TAG_WIDTH = PORT_VALID_BIT + PORT_LAST_BIT + PORT_SAME_BIT + PORT_LAST_INDEX
SE_BUF_ROW_INPORT_IDX_WIDTH = BUFFER_ROW_ADDR_WIDTH
SE_BUF_ROW_INPORT_WIDTH = SE_BUF_ROW_INPORT_IDX_WIDTH + SE_BUF_INPORT_TAG_WIDTH
SE_BUF_COL_INPORT_IDX_WIDTH = BUFFER_COL_ADDR_WIDTH
SE_BUF_COL_INPORT_WIDTH = SE_BUF_COL_INPORT_IDX_WIDTH + SE_BUF_INPORT_TAG_WIDTH
SE_RD_MSE_CFG_CNT = 4
SE_RD_MSE_CFG_PORT_WIDTH = 128
SE_RD_MSE_CFG_REG_WIDTH = SE_RD_MSE_CFG_PORT_WIDTH * SE_RD_MSE_CFG_CNT
SE_WR_MSE_CFG_CNT = 4
SE_WR_MSE_CFG_PORT_WIDTH = 128
SE_WR_MSE_CFG_REG_WIDTH = SE_WR_MSE_CFG_PORT_WIDTH * SE_WR_MSE_CFG_CNT
SE_NSE_CFG_CNT = 1
SE_NSE_CFG_PORT_WIDTH = 128
SE_NSE_CFG_REG_WIDTH = SE_NSE_CFG_PORT_WIDTH * SE_NSE_CFG_CNT
SE_CFG_PORT_WIDTH = 128
SE_CFG_CNT_WIDTH = clog2(4)

# Stream Engine Connect
MSE_SRC_LC_NUM = 6
MSE_SRC_PE_NUM = 6
MSE_SRC_NUM = MSE_SRC_LC_NUM + MSE_SRC_PE_NUM
MEM_INPORT_SRC_ID_WIDTH = clog2(MSE_SRC_NUM)
NSE_SLICE_SRC_NUM = 2
NSE_SLICE_SEL_WIDTH = clog2(NSE_SLICE_SRC_NUM)

# Memory Stream Engine
MEM_INPORT_CONSTANT_WIDTH = 8
MSE_HANDLE_BUF_NUM = 2
MEMORY_RD_STREAM_ENGINE_NUM = 3
MEMORY_WR_STREAM_ENGINE_NUM = 1
MEMORY_STREAM_ENGINE_NUM = MEMORY_RD_STREAM_ENGINE_NUM + MEMORY_WR_STREAM_ENGINE_NUM
MSE_MQ_INPORT_NUM = 3
MSE_MQ_INPORT_TAG_WIDTH = SE_MEM_INPORT_TAG_WIDTH
MSE_MQ_INPORT_IDX_WIDTH = SE_MEM_INPORT_IDX_WIDTH
MSE_BQ_INPORT_NUM = 2
MSE_MEM_AG_INPORT_NUM = MSE_MQ_INPORT_NUM
MSE_MEM_AG_INPORT_TAG_WIDTH = PORT_VALID_BIT + PORT_LAST_BIT + PORT_LAST_INDEX
MSE_MEM_AG_INPORT_IDX_WIDTH = MSE_MQ_INPORT_IDX_WIDTH
MSE_BUF_AG_INPORT_NUM = MSE_BQ_INPORT_NUM
MSE_BUF_AG_INPORT_TAG_WIDTH = PORT_VALID_BIT + PORT_LAST_BIT + PORT_LAST_INDEX
MSE_BUF_AG_INPORT_IDX_WIDTH = SE_BUF_ROW_INPORT_IDX_WIDTH + SE_BUF_COL_INPORT_IDX_WIDTH
MSE_BUF_AG_TAG_REG_WIDTH = PORT_LAST_INDEX + PORT_LAST_BIT
MSE_STREAM_BASE_ADDR_WIDTH = GLOBAL_DDR_ADDR_WIDTH
MSE_TSA_MULT_WIDTH = 20
MSE_TSA_SP_SIZE_WIDTH = 8
MSE_TSA_SP_SIZE_LOG_WIDTH = clog2(MSE_TSA_SP_SIZE_WIDTH)
MSE_TSA_SIZE_WIDTH = clog2(BUFFER_COL_SIZE * BUFFER_ROW_SIZE) + 1
MSE_TSA_IDX_WIDTH = MSE_MEM_AG_INPORT_IDX_WIDTH
MSE_TSA_DIM_WIDTH = MSE_TSA_IDX_WIDTH + MSE_TSA_MULT_WIDTH
MSE_TSA_ADDR_BIAS_WIDTH = MSE_TSA_DIM_WIDTH + 1
MSE_TSA_ADDR_WIDTH = GLOBAL_DDR_ADDR_WIDTH
MSE_TSF_SIZE_WIDTH = DDR_ADDR_OFFSET_WIDTH + 1
MSE_TSF_IDX_WIDTH = MSE_TSA_IDX_WIDTH
MSE_TSF_CNT_WIDTH = 8
MSE_TSF_DIM_WIDTH = MSE_TSF_IDX_WIDTH + MSE_TSA_MULT_WIDTH
MSE_TSF_ADDR_WIDTH = MSE_TSF_DIM_WIDTH + 1
MSE_REMAP_MATRIX_HEIGHT = 16
MSE_REMAP_MATRIX_WIDTH = clog2(MSE_REMAP_MATRIX_HEIGHT)
MSE_PADDING_VALUE_WIDTH = 8
MSE_PADDING_BOUNDARY_WIDTH = 12
MSE_BRANCH_BOUNDARY_WIDTH = 12
MSE_MEM_REQ_MASK_FLAG = 0b1
MSE_MEM_REQ_ADDR_WIDTH = GLOBAL_DDR_ADDR_NOOFF_WIDTH
MSE_MEM_REQ_RW_WIDTH = 1
MSE_MEM_REQ_WIDTH = MSE_MEM_REQ_RW_WIDTH + MSE_MEM_REQ_ADDR_WIDTH
MSE_MEM_REQ_DATA_WIDTH = DDR_DATA_MIN_WIDTH
MSE_MASK_WIDTH = DDR_COL_DATA_WIDTH // DDR_DATA_MIN_WIDTH
MSE_VALID_MASK_WIDTH = MSE_MASK_WIDTH
MSE_PADDING_MASK_WIDTH = MSE_MASK_WIDTH
MSE_BRANCH_MASK_WIDTH = MSE_MASK_WIDTH
MSE_BUF_PINGPONG_SEL = 0b1
MSE_BUF_REQ_NUM = DDR_COL_DATA_WIDTH // DDR_DATA_MIN_WIDTH
MSE_BUF_STRIDE_WIDTH = clog2(BUFFER_COL_SIZE)
MSE_BUF_SIZE_WIDTH = clog2(MSE_BUF_REQ_NUM)
MSE_BUF_REQ_ADDR_WIDTH = BUFFER_ROW_ADDR_WIDTH + BUFFER_COL_ADDR_WIDTH
MSE_BUF_REQ_DATA_WIDTH = DDR_DATA_MIN_WIDTH
MSE_BUF_REQ_TAG_WIDTH = PORT_BRANCH_BIT + PORT_LAST_BIT + PORT_LAST_INDEX

# Neighbor Stream Engine
NEIGHBOR_STREAM_ENGINE_NUM = 2
NSE_HANDLE_BUF_NUM = 2
NSE_CNT_WIDTH = 4
NSE_STREAM_ID_WIDTH = clog2(MEMORY_STREAM_ENGINE_NUM)
NSE_REQ_ROW_ADDR_WIDTH = BUFFER_ROW_ADDR_WIDTH
NSE_REQ_DATA_WIDTH = 256
NSE_REQ_TAG_WIDTH = 8 * (PORT_BRANCH_BIT + PORT_LAST_BIT + PORT_LAST_INDEX)
NSE_REQ_VLD_BUF_WIDTH = 32

# Stream Arbiter
STREAM_ENGINE_ARBITER_NUM = 2
SEA_HANDLED_STREAM_NUM = 2
SEA_REQ_WIDTH = GLOBAL_DDR_ADDR_NOOFF_WIDTH + 1 + 1

# Specialized Array - SA
SA_ROW_PE_NUM = 8
SA_COL_PE_NUM = 8
SA_PE_NUM = SA_ROW_PE_NUM * SA_COL_PE_NUM
SA_INPORT_GROUP_NUM = 3
SA_OUTPORT_GROUP_NUM = 1
SA_PORT_GROUP_NUM = SA_INPORT_GROUP_NUM + SA_OUTPORT_GROUP_NUM
SA_PORT_HANDLE_BUF_NUM = 2
SA_INPORT_NUM = 8
SA_INPORT_TAG = PORT_VALID_BIT + PORT_BRANCH_BIT + PORT_LAST_BIT + PORT_SAME_BIT + PORT_LAST_INDEX
SA_INPORT_DATA = 32
SA_INPORT_SRC_NUM = 2
SA_INPORT_DST_NUM = 8
SA_INPORT_ENABLE = 1
SA_INPORT_PINGPONG_EN = 1
SA_INPORT_SRC_ID_WIDTH = clog2(SA_INPORT_SRC_NUM)
SA_INPORT_CFG_PORT_WIDTH = (SA_INPORT_ENABLE + SA_INPORT_PINGPONG_EN + PORT_LAST_INDEX + SA_INPORT_SRC_ID_WIDTH * 2)
SA_OUTPORT_NUM = 8
SA_OUTPORT_TAG = PORT_VALID_BIT + PORT_BRANCH_BIT + PORT_LAST_BIT + PORT_SAME_BIT + PORT_LAST_INDEX
SA_OUTPORT_DATA = 32
SA_OUTPORT_SRC_NUM = 8
SA_OUTPORT_GA_DST_NUM = 3
SA_OUTPORT_BUF_DST_NUM = 1
SA_OUTPORT_DST_NUM = SA_OUTPORT_GA_DST_NUM + SA_OUTPORT_BUF_DST_NUM
SA_OUTPORT_FP32TO16 = 0b1
SA_OUTPORT_MAJOR = 0b1
SA_OUTPORT_ROW_MAJOR = 0b0
SA_OUTPORT_COL_MAJOR = 0b1
SA_OUTPORT_CFG_PORT_WIDTH = SA_OUTPORT_MAJOR + SA_OUTPORT_FP32TO16
SA_PE_INPORT_NUM = 3
SA_PE_PORT_TAG_WIDTH = PORT_VALID_BIT + PORT_BRANCH_BIT + PORT_LAST_BIT + PORT_SAME_BIT + PORT_LAST_INDEX
SA_PE_PORT_DATA_WIDTH = 32
SA_PE_PORT_WIDTH = SA_PE_PORT_TAG_WIDTH + SA_PE_PORT_DATA_WIDTH
SA_PE_TRANSOUT_LAST_INDEX = PORT_LAST_INDEX
SA_PE_COMP_DATA_TYPE_WIDTH = 2
SA_PE_COMP_INT8_TYPE = 0b00
SA_PE_COMP_FP16_TYPE = 0b10
SA_PE_COMP_BF16_TYPE = 0b11
SA_PE_CFG_PORT_WIDTH = SA_INPORT_CFG_PORT_WIDTH * SA_INPORT_GROUP_NUM + SA_PE_COMP_DATA_TYPE_WIDTH + SA_PE_TRANSOUT_LAST_INDEX
SA_PE_ALU_DATA_WIDTH = 32
SA_PE_ALU_TAG_WIDTH = PORT_VALID_BIT + PORT_BRANCH_BIT + PORT_LAST_BIT + PORT_LAST_INDEX
SA_PE_OB_PSUM_BIT = 0b1
SA_PE_OB_SIZE = 16
SA_PE_OB_GROUP_SIZE = 2
SA_PE_OB_PTR_WIDTH = clog2(SA_PE_OB_SIZE)
SA_PE_OB_TAG_WIDTH = SA_PE_OB_PSUM_BIT + PORT_BRANCH_BIT + PORT_LAST_BIT + PORT_LAST_INDEX
SA_PE_OB_DATA_WIDTH = 32
SA_PE_OB_PORT_WIDTH = SA_PE_OB_TAG_WIDTH + SA_PE_OB_DATA_WIDTH
SA_CFG_PORT_WIDTH = SA_INPORT_CFG_PORT_WIDTH * SA_INPORT_GROUP_NUM + SA_PE_CFG_PORT_WIDTH + SA_OUTPORT_CFG_PORT_WIDTH * SA_OUTPORT_GROUP_NUM

# General Array - GA
GA_ROW_PE_NUM = 4
GA_COL_PE_NUM = 4
GA_INPORT_GROUP_NUM = 3
GA_OUTPORT_GROUP_NUM = 1
GA_PORT_GROUP_NUM = GA_INPORT_GROUP_NUM + GA_OUTPORT_GROUP_NUM
GA_PE_NUM = GA_ROW_PE_NUM * GA_COL_PE_NUM
GA_PORT_HANDLE_BUF_NUM = 2
GA_INPORT_NUM = 8
GA_INPORT_TAG = PORT_VALID_BIT + PORT_BRANCH_BIT + PORT_LAST_BIT + PORT_SAME_BIT + PORT_LAST_INDEX
GA_INPORT_DATA = 32
GA_INPORT_DST_NUM = 2
GA_INPORT_SRC_BUF_NUM = 2
GA_INPORT_SRC_SA_NUM = 1
GA_INPORT_SRC_NUM = GA_INPORT_SRC_BUF_NUM + GA_INPORT_SRC_SA_NUM
GA_INPORT_ENABLE_WIDTH = GA_INPORT_NUM
GA_INPORT_PINGPONG_EN = 1
GA_INPORT_SRC_ID_WIDTH = 1
GA_INPORT_FP16TO32 = 0b1
GA_INPORT_INT32TOFP = 0b1
GA_INPORT_CFG_PORT_WIDTH = (GA_INPORT_ENABLE_WIDTH + GA_INPORT_SRC_ID_WIDTH + GA_INPORT_PINGPONG_EN + PORT_LAST_INDEX + GA_INPORT_FP16TO32 + GA_INPORT_INT32TOFP)
GA_OUTPORT_NUM = 8
GA_OUTPORT_TAG = PORT_VALID_BIT + PORT_BRANCH_BIT + PORT_LAST_BIT + PORT_SAME_BIT + PORT_LAST_INDEX
GA_OUTPORT_DATA = 32
GA_OUTPORT_DST_NUM = 1
GA_OUTPORT_SRC_NUM = 2
GA_OUTPORT_SRC_ID_WIDTH = clog2(GA_OUTPORT_SRC_NUM)
GA_OUTPORT_FP32TO16 = 0b1
GA_OUTPORT_INT32TO8 = 0b1
GA_OUTPORT_CFG_PORT_WIDTH = GA_OUTPORT_NUM + GA_OUTPORT_SRC_ID_WIDTH + GA_OUTPORT_FP32TO16 + GA_OUTPORT_INT32TO8
# GA_PE_CFG_PORT_WIDTH = GA_PE_INPORT_NUM * (GA_PE_SRC_ID_WIDTH + GA_PE_INPORT_MODE_WIDTH + PORT_LAST_INDEX + GA_PE_CONSTANT_VALUE_WIDTH) + GA_PE_ALU_OPCODE_WIDTH
GA_PE_SRC_GA_INPORT_NUM = 1
GA_PE_SRC_GA_PE_NUM = 5
GA_PE_SRC_NUM = GA_PE_SRC_GA_INPORT_NUM + GA_PE_SRC_GA_PE_NUM
GA_PE_INPORT_NUM = 3
GA_PE_DST_GA_OUTPORT_NUM = 1
GA_PE_DST_GA_PE_NUM = 15
GA_PE_DST_NUM = GA_PE_DST_GA_OUTPORT_NUM + GA_PE_DST_GA_PE_NUM
GA_PE_SRC_ID_WIDTH = clog2(GA_PE_SRC_NUM)
# GA_PE_CFG_PORT_WIDTH = GA_PE_INPORT_NUM * (GA_PE_SRC_ID_WIDTH + GA_PE_INPORT_MODE_WIDTH + PORT_LAST_INDEX + GA_PE_CONSTANT_VALUE_WIDTH) + GA_PE_ALU_OPCODE_WIDTH
GA_PE_INPORT_MODE_WIDTH = 2
                                           
GA_PE_ALU_OPCODE_WIDTH = 3
GA_PE_ALU_OPCODE_FP32_ADD = 0b000
GA_PE_ALU_OPCODE_FP32_SUB = 0b001
GA_PE_ALU_OPCODE_FP32_MUL = 0b010
GA_PE_ALU_OPCODE_FP32_MAX = 0b011
GA_PE_ALU_OPCODE_FP32_SUM = 0b100
GA_PE_ALU_OPCODE_INT8_MAX = 0b101
GA_PE_ALU_OPCODE_INT32_MAC = 0b110
GA_PE_ALU_OPCODE_INT32_SUM = 0b111
GA_PE_CONSTANT_VALUE_WIDTH = 32
GA_PE_CFG_PORT_WIDTH = GA_PE_INPORT_NUM * (GA_PE_SRC_ID_WIDTH + GA_PE_INPORT_MODE_WIDTH + PORT_LAST_INDEX + GA_PE_CONSTANT_VALUE_WIDTH) + GA_PE_ALU_OPCODE_WIDTH

GA_PE_PORT_TAG_WIDTH = PORT_VALID_BIT + PORT_BRANCH_BIT + PORT_LAST_BIT + PORT_SAME_BIT + PORT_LAST_INDEX
GA_PE_PORT_DATA_WIDTH = 32
GA_PE_PORT_WIDTH = GA_PE_PORT_TAG_WIDTH + GA_PE_PORT_DATA_WIDTH
GA_PE_ALU_DATA_WIDTH = GA_PE_PORT_DATA_WIDTH
GA_PE_ALU_TAG_WIDTH = PORT_VALID_BIT + PORT_BRANCH_BIT + PORT_LAST_BIT + PORT_LAST_INDEX
GA_PE_OUTBUFFER_DEPTH = 2
GA_PE_OUTBUFFER_TAG_WIDTH = PORT_VALID_BIT + PORT_BRANCH_BIT + PORT_LAST_BIT + PORT_LAST_INDEX
GA_PE_OUTBUFFER_DATA_WIDTH = GA_PE_PORT_DATA_WIDTH
GA_PE_OUTBUFFER_WIDTH = GA_PE_OUTBUFFER_TAG_WIDTH + GA_PE_OUTBUFFER_DATA_WIDTH
GA_PE_OUTBUFFER_PTR_WIDTH = clog2(GA_PE_OUTBUFFER_DEPTH)
GA_PE_OUTBUFFER_CNT_WIDTH = clog2(GA_PE_OUTBUFFER_DEPTH) + 1

if __name__ == "__main__":
    # quick dump of values for inspection
    import json
    vals: Dict[str, int] = {k: v for k, v in globals().items() if k.isupper() and not k.startswith("__") and not callable(v)}
    print(json.dumps(vals, indent=2))
